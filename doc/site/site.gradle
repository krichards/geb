/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://oss.jfrog.org/artifactory/repo" }
        jcenter()
    }
    dependencies {
        classpath 'io.ratpack:ratpack-gradle:1.4.5'
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

apply plugin: "io.ratpack.ratpack-groovy"
apply plugin: "com.moowork.node"
apply plugin: "com.moowork.gulp"

ext {
    // The old versions of Geb we are including manuals for
    oldManualVersions = ["0.10.0", "0.12.0", "0.12.1", "0.12.2", "0.13.0", "0.13.1", "1.0", "1.1", "1.1.1", "2.0", "2.1"]

    currentVersion = isSnapshot ? oldManualVersions.last() : version
    manualsMetadata = [
        'old'     : (oldManualVersions - currentVersion).reverse().join(','),
        'current' : currentVersion,
        'snapshot': isSnapshot ? project.version : ''
    ]
}

repositories {
    maven { url "http://oss.jfrog.org/artifactory/repo" }
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://oss.sonatype.org/content/repositories/releases" }
}

configurations {
    currentManual

    oldManualVersions.each {
        delegate."manual-$it"
    }
}

dependencies {
    testCompile spockDependency,
        jsoupDependency,
        project(':module:geb-spock'),
        htmlUnitDriverDependency

    currentManual project(":doc:manual")
    oldManualVersions.each {
        delegate."manual-$it" "org.gebish:geb-manual:$it@zip"
    }
}

node {
    version = '7.9.0'

    download = true

    nodeModulesDir = file("src/npm")
}

gulp {
    workDir = file("src/npm/semantic")
}

task bundleSemantic(type: GulpTask) {
    dependsOn npmInstall

    inputs.dir 'src/npm/semantic/src'
    inputs.dir 'src/npm/semantic/tasks'
    inputs.file 'src/npm/semantic/gulpfile.js'
    outputs.dir 'src/npm/semantic/dist'

    args = ["build"]
}

processResources {
    from(npmInstall) {
        includeEmptyDirs = false
        include 'jquery/dist/jquery.min.js'
        eachFile {
            it.relativePath = new RelativePath(true, 'public', 'js', it.sourceName)
        }
    }
    from(npmInstall) {
        includeEmptyDirs = false
        include '@browser-logos/android/android_128x128.png'
        include '@browser-logos/chrome/chrome_128x128.png'
        include '@browser-logos/safari/safari_128x128.png'
        include '@browser-logos/safari-ios/safari-ios_128x128.png'
        include '@browser-logos/edge/edge_128x128.png'
        include '@browser-logos/firefox/firefox_128x128.png'
        eachFile {
            it.relativePath = new RelativePath(true, 'public', 'images', it.sourceName)
        }
    }
    from(bundleSemantic) {
        include 'semantic.min.css'
        into 'public/css'
    }
    from(bundleSemantic) {
        include 'semantic.min.js'
        into 'public/js'
    }
    from(bundleSemantic) {
        include 'themes/default/assets/fonts/**'
        into 'public/css'
    }
    from(bundleSemantic) {
        include 'themes/default/assets/images/**'
        into 'public/css'
    }
}

task gatherManuals(type: Sync) {
    inputs.properties(manualsMetadata)

    def configureManualExtraction = { configuration, label ->
        inputs.files configuration
        into "src/ratpack/public/manual"
        into label, {
            from { zipTree(configuration.singleFile) }
        }
    }

    oldManualVersions.each {
        configureManualExtraction(configurations["manual-$it"], it)
    }
    configureManualExtraction(configurations.currentManual, isSnapshot ? 'snapshot' : version)
    def latestStableManualConfiguration = isSnapshot ? configurations["manual-${oldManualVersions.last()}"] : configurations.currentManual
    configureManualExtraction(latestStableManualConfiguration, "current")
}

task generateConfigProperties() {
    def propertiesFile = file('src/ratpack/ratpack.properties')
    outputs.file(propertiesFile)

    inputs.properties(manualsMetadata)

    doLast {
        def properties = new Properties()
        manualsMetadata.each { key, value ->
            properties.setProperty("manuals.${key}", value)
        }
        propertiesFile.withWriter { Writer writer ->
            properties.store(writer, null)
        }
    }
}

processResources.inputs.files gatherManuals, generateConfigProperties

task publish(type: Exec) {
    commandLine 'git push git@heroku.com:gebish.git master'.tokenize(' ')

    mustRunAfter rootProject.allprojects*.tasks*.withType(Upload)
}

task prepareDeployment(type: Sync) {
    into rootProject.file("deploy")
    with distributions.main.contents
}

if (project.gradle.startParameter.continuous) {
    run {
        flattenClassloaders = true
    }
}

idea {
    module {
        excludeDirs += file('src/npm/node_modules')
        excludeDirs += file('src/ratpack/public/manual')
    }
}
