buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
        classpath "gradle.plugin.com.energizedwork:idea-gradle-plugins:1.4"
        classpath "gradle.plugin.com.energizedwork.asl2:asl2-gradle-plugin:1.1"
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:1.4"
    }
}

apply plugin: 'base'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'com.energizedwork.asl2'
apply plugin: 'com.energizedwork.idea-junit'
apply from: "gradle/idea.gradle"

def getProperty(String name, defaultValue) {
    hasProperty(name) ? property(name) : defaultValue
}

nexusStaging {
    username = getProperty("sonatypeOssUsername", null)
    password = getProperty("sonatypeOssPassword", null)
}

allprojects { project ->
    version = '2.2-SNAPSHOT'
    group = 'org.gebish'

    apply plugin: "com.energizedwork.webdriver-binaries"

    ext {
        isSnapshot = version.endsWith("-SNAPSHOT")
        isCi = project.hasProperty("ci")

        seleniumVersion = "3.6.0"
        htmlUnitDriverVersion = "2.27"
        groovyVersion = "2.4.15"
        spockVersion = "1.1-groovy-2.4"
        junit4Version = "4.10"
        geckodriverVersion = "0.19.0"

        spockDependency = dependencies.create("org.spockframework:spock-core:$spockVersion") {
            exclude module: "groovy-all"
        }

        seleniumDependency = "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
        seleniumSupportDependency = "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
        firefoxDriverDependency = "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
        htmlUnitDriverDependency = "org.seleniumhq.selenium:htmlunit-driver:$htmlUnitDriverVersion"

        jettyDependency = "org.mortbay.jetty:jetty:6.1.21"

        groovyDependency = "org.codehaus.groovy:groovy-all:$groovyVersion"

        jsoupDependency = "org.jsoup:jsoup:1.11.2"

        repositories {
            mavenCentral()
            maven {
                name "java.net"
                url "http://download.java.net/maven/2"
            }
        }

        groovyModules = [
            ":module:geb-core", ":internal:test-support",
            ":module:geb-spock", ":module:geb-junit3", ":module:geb-junit4",
            ":module:geb-testng", ":module:geb-implicit-assertions",
            ":module:geb-ast", ":module:geb-waiting", ":module:geb-exceptions",
            ":integration:geb-gradle", ":doc:site", ":doc:manual-snippets",
            ":compatibility:groovy-2.3.7", ":compatibility:spock-1.0"
        ]

        publishedModules = [
            ":module:geb-core", ":module:geb-implicit-assertions", ":module:geb-ast", ":module:geb-waiting", ":module:geb-exceptions",
            ":module:geb-spock", ":module:geb-junit3", ":module:geb-junit4", ":module:geb-testng", ":doc:manual", ":integration:geb-gradle"
        ]

        publishedGroovyModules = groovyModules.findAll { it in publishedModules }
        apiGroovyModules = publishedGroovyModules - ":module:geb-implicit-assertions" - ":integration:geb-gradle"
    }

    webdriverBinaries {
        geckodriver geckodriverVersion
    }

    if (isCi) {
        plugins.withType(ReportingBasePlugin) {
            reporting.baseDir = rootProject.file("$rootProject.buildDir/reports/$project.name")
        }
    }
}

tasks.create('codenarc')

subprojects {
    if (path in groovyModules) {
        apply plugin: "groovy"
        apply plugin: "idea"
        apply plugin: "codenarc"

        dependencies {
            compile groovyDependency
            codenarc 'org.codenarc:CodeNarc:1.1', {
                exclude module: "GMetrics"
                exclude group: "org.codehaus.groovy"
            }
            codenarc groovyDependency
        }

        codenarc.configFile = rootProject.file('gradle/codenarc/rulesets.groovy')

        project.tasks.withType(CodeNarc) { codenarcSourceSetTask ->
            codenarcSourceSetTask.exclude 'GebConfig*.groovy'
            rootProject.tasks.codenarc.dependsOn codenarcSourceSetTask
            rootProject.allprojects {
                tasks.withType(Test) {
                    mustRunAfter codenarcSourceSetTask
                }
            }
        }

        tasks.withType(Test) {
            reports.junitXml.destination = reporting.file("test-results/$name")
            reports.html.destination = reporting.file("test-reports/$name")
            binResultsDir = file("$buildDir/test-results-bin/$name")

            ext.driver = project.properties["driver"] ?: "htmlunit"
            systemProperty 'geb.dev.driver', driver

            systemProperty 'geb.build.reportsDir', reporting.file("geb-reports/$name")

            systemProperty 'jna.nosys', 'true'
        }

    }

    if (path in publishedGroovyModules) {
        task sourcesJar(type: Jar) {
            classifier 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            classifier 'javadoc'
            from groovydoc
        }

        artifacts {
            archives javadocJar, sourcesJar
        }

        gradle.taskGraph.whenReady { taskGraph ->
            if (taskGraph.hasTask(uploadArchives) && !isSnapshot) {
                tasks.withType(JavaCompile) {
                    options.compilerArgs << "-Werror" << "-Xlint:options"
                }
                tasks.withType(GroovyCompile) {
                    options.compilerArgs << "-Werror" << "-Xlint:options"
                }
            }
        }
    }

    tasks.withType(Groovydoc) {
        exclude "**/internal/**"

        link "http://download.oracle.com/javase/6/docs/api/",
            "java.net",
            "java.util",
            "java.lang",
            "java.io"

        link "http://static.javadoc.io/org.seleniumhq.selenium/selenium-api/$seleniumVersion",
            "org.openqa.selenium"

        link "http://static.javadoc.io/org.spockframework/spock-core/$spockVersion",
            "spock.lang"

        link "http://static.javadoc.io/junit/junit/$junit4Version",
            "org.junit"

        link "http://docs.groovy-lang.org/docs/groovy-${groovyVersion}/html/api/",
            "groovy.lang"

        def docName = project.name == "manual" ? "Geb" : project.name
        docTitle = "Groovy API Documentation for $docName $version"
        footer = "<p style='text-align: center'>Groovy API Documentation for $docName $version - Licensed under the Apache License, Version 2.0 - <a href='http://www.gebish.org'>http://www.gebish.org</a></p>"
        windowTitle = "Groovy API for $docName $version"
    }

    tasks.withType(Test) {
        maxHeapSize = "768m"
        jvmArgs '-XX:MaxMetaspaceSize=192m'
        testLogging {
            exceptionFormat = 'full'
        }
    }

    tasks.withType(GroovyCompile) {
        groovyOptions.forkOptions.memoryMaximumSize = '256m'
    }


    if (path in publishedModules) {
        apply plugin: "base"
        apply plugin: "maven"
        apply plugin: "signing"

        signing {
            sign configurations.archives
            required { !isSnapshot && !isCi && gradle.taskGraph.hasTask(uploadArchives) }
        }

        apply from: "$rootDir/gradle/pom.gradle"

        if (path == ":doc:manual") {
            task("install", type: Upload, dependsOn: configurations.archives.allArtifacts.buildDependencies) {
                configuration = configurations.archives
                description = "Does a maven install of the archives artifacts into the local .m2 cache."
                repositories {
                    mavenInstaller name: "mavenInstaller"
                }
            }
        }

        uploadArchives { task ->
            repositories.mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                gradle.taskGraph.whenReady { taskGraph ->
                    if (taskGraph.hasTask(task)) {
                        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                            authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
                        }
                        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                            authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
                        }
                    }
                }
            }

            task.onlyIf { isSnapshot || !isCi }
        }
    }

    if (isCi) {
        tasks.withType(Test) {
            testLogging {
                showStackTraces = true
                exceptionFormat "full"
            }
        }
    }

}

task release {
    dependsOn { allprojects.findAll { it.path in publishedModules }*.uploadArchives }
}

task stage(type: Sync) {
    dependsOn 'doc:site:prepareDeployment'
}
